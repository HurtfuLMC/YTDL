import subprocess
import requests
import os

def install_package(package_name):
    try:
        subprocess.check_call(["pip", "install", package_name])
    except Exception as e:
        print(f"An error occurred while installing {package_name}: {e}")

def check_and_install_required_packages():
    required_packages = ["pytube", "moviepy", "clipboard"]
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            print(f"{package} is not installed. Installing...")
            install_package(package)

def choose_output_directory():
    root = tk.Tk()
    root.withdraw()  # Hide the main window
    return filedialog.askdirectory()  # Show directory selection dialog and return the chosen directory

def get_input_with_clipboard(prompt):
    url = input(prompt)
    clipboard_url = clipboard.paste().strip()
    if clipboard_url and (clipboard_url.startswith("https://www.youtube.com/") or clipboard_url.startswith("https://youtu.be/")):
        print(f"YouTube URL detected from clipboard: {clipboard_url}")
        if input("Would you like to use this URL? (y/n): ").lower() == 'y':
            url = clipboard_url
    return url

def download_audio(url, output_path, file_format):
    try:
        yt = YouTube(url)
        audio_stream = yt.streams.filter(only_audio=True).first()
        if file_format.lower() == 'mp3':
            audio_file_path = audio_stream.download(output_path=output_path)
            os.rename(audio_file_path, audio_file_path.replace(".mp4", ".mp3"))
        elif file_format.lower() == 'wav':
            audio_file_path = audio_stream.download(output_path=output_path)
            os.rename(audio_file_path, audio_file_path.replace(".mp4", ".wav"))
        print(f"{file_format.upper()} file saved as: {audio_file_path.replace('.mp4', '.' + file_format.lower())}")
        return audio_file_path
    except Exception as e:
        print(f"An error occurred: {str(e)}")
        return None

def download_playlist_audio(url, output_path, file_format):
    try:
        playlist = Playlist(url)
        total_videos = len(playlist.video_urls)
        for index, video_url in enumerate(playlist.video_urls, start=1):
            remaining = total_videos - index
            print(f"Downloading video {index}/{total_videos}, {remaining} remaining")
            download_audio(video_url, output_path, file_format)
    except Exception as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    # Check for updates and install required packages
    check_and_install_required_packages()
    check_for_updates("your_github_username", "your_repository_name", "1.0")
    
    while True:
        url_type = input("Enter '1' for single video URL, '2' for playlist URL, or 'quit' to exit: ")
        if url_type == '1':
            video_url = get_input_with_clipboard("Enter the URL of the YouTube video or press Enter to paste from clipboard: ")
            file_format = input("Enter the file format (MP3 or WAV): ").lower()
            if file_format not in ['mp3', 'wav']:
                print("Invalid file format. Please enter 'MP3' or 'WAV'.")
                continue
            output_path = choose_output_directory()
            if output_path:
                download_audio(video_url, output_path, file_format)
        elif url_type == '2':
            playlist_url = get_input_with_clipboard("Enter the URL of the YouTube playlist or press Enter to paste from clipboard: ")
            file_format = input("Enter the file format (MP3 or WAV): ").lower()
            if file_format not in ['mp3', 'wav']:
                print("Invalid file format. Please enter 'MP3' or 'WAV'.")
                continue
            output_path = choose_output_directory()
            if output_path:
                download_playlist_audio(playlist_url, output_path, file_format)
        elif url_type.lower() == 'quit':
            break
        else:
            print("Invalid option. Please enter '1', '2', or 'quit'.")
